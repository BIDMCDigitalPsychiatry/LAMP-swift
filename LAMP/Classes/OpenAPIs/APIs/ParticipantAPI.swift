//
// ParticipantAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
import Combine

extension LAMPAPI {


@objc open class ParticipantAPI : NSObject {
    /**
     Get the set of all participants.
     
     - parameter transform: (query)  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - returns: AnyPublisher<[Any], Error>
     */
    @available(OSX 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func participantAll(transform: String? = nil, apiResponseQueue: DispatchQueue = LAMPAPI.apiResponseQueue) -> AnyPublisher<[Any], Error> {
        return Future<[Any], Error>.init { promisse in
            participantAllWithRequestBuilder(transform: transform).execute(apiResponseQueue) { result -> Void in
                switch result {
                case let .success(response):
                    promisse(.success(response.body!))
                case let .failure(error):
                    promisse(.failure(error))
                }
            }
        }.eraseToAnyPublisher()
    }

    /**
     Get the set of all participants.
     - GET /participant
     - Get the set of all participants.
     - API Key:
       - type: apiKey Authorization 
       - name: Authorization
     - parameter transform: (query)  (optional)
     - returns: RequestBuilder<[Any]> 
     */
    open class func participantAllWithRequestBuilder(transform: String? = nil) -> RequestBuilder<[Any]> {
        let path = "/participant"
        let URLString = LAMPAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "transform": transform?.encodeToJSON()
        ])

        let requestBuilder: RequestBuilder<[Any]>.Type = LAMPAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Get the set of all participants under a single researcher.
     
     - parameter researcherId: (path)  
     - parameter transform: (query)  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - returns: AnyPublisher<[Any], Error>
     */
    @available(OSX 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func participantAllByResearcher(researcherId: String, transform: String? = nil, apiResponseQueue: DispatchQueue = LAMPAPI.apiResponseQueue) -> AnyPublisher<[Any], Error> {
        return Future<[Any], Error>.init { promisse in
            participantAllByResearcherWithRequestBuilder(researcherId: researcherId, transform: transform).execute(apiResponseQueue) { result -> Void in
                switch result {
                case let .success(response):
                    promisse(.success(response.body!))
                case let .failure(error):
                    promisse(.failure(error))
                }
            }
        }.eraseToAnyPublisher()
    }

    /**
     Get the set of all participants under a single researcher.
     - GET /researcher/{researcher_id}/participant
     - Get the set of all participants under a single researcher.
     - API Key:
       - type: apiKey Authorization 
       - name: Authorization
     - parameter researcherId: (path)  
     - parameter transform: (query)  (optional)
     - returns: RequestBuilder<[Any]> 
     */
    open class func participantAllByResearcherWithRequestBuilder(researcherId: String, transform: String? = nil) -> RequestBuilder<[Any]> {
        var path = "/researcher/{researcher_id}/participant"
        let researcherIdPreEscape = "\(APIHelper.mapValueToPathItem(researcherId))"
        let researcherIdPostEscape = researcherIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{researcher_id}", with: researcherIdPostEscape, options: .literal, range: nil)
        let URLString = LAMPAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "transform": transform?.encodeToJSON()
        ])

        let requestBuilder: RequestBuilder<[Any]>.Type = LAMPAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Get the set of all participants in a single study.
     
     - parameter studyId: (path)  
     - parameter transform: (query)  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - returns: AnyPublisher<[Any], Error>
     */
    @available(OSX 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func participantAllByStudy(studyId: String, transform: String? = nil, apiResponseQueue: DispatchQueue = LAMPAPI.apiResponseQueue) -> AnyPublisher<[Any], Error> {
        return Future<[Any], Error>.init { promisse in
            participantAllByStudyWithRequestBuilder(studyId: studyId, transform: transform).execute(apiResponseQueue) { result -> Void in
                switch result {
                case let .success(response):
                    promisse(.success(response.body!))
                case let .failure(error):
                    promisse(.failure(error))
                }
            }
        }.eraseToAnyPublisher()
    }

    /**
     Get the set of all participants in a single study.
     - GET /study/{study_id}/participant
     - Get the set of all participants in a single study.
     - API Key:
       - type: apiKey Authorization 
       - name: Authorization
     - parameter studyId: (path)  
     - parameter transform: (query)  (optional)
     - returns: RequestBuilder<[Any]> 
     */
    open class func participantAllByStudyWithRequestBuilder(studyId: String, transform: String? = nil) -> RequestBuilder<[Any]> {
        var path = "/study/{study_id}/participant"
        let studyIdPreEscape = "\(APIHelper.mapValueToPathItem(studyId))"
        let studyIdPostEscape = studyIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{study_id}", with: studyIdPostEscape, options: .literal, range: nil)
        let URLString = LAMPAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "transform": transform?.encodeToJSON()
        ])

        let requestBuilder: RequestBuilder<[Any]>.Type = LAMPAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Create a new Participant for the given Study.
     
     - parameter studyId: (path)  
     - parameter participant: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - returns: AnyPublisher<String, Error>
     */
    @available(OSX 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func participantCreate(studyId: String, participant: Participant, apiResponseQueue: DispatchQueue = LAMPAPI.apiResponseQueue) -> AnyPublisher<String, Error> {
        return Future<String, Error>.init { promisse in
            participantCreateWithRequestBuilder(studyId: studyId, participant: participant).execute(apiResponseQueue) { result -> Void in
                switch result {
                case let .success(response):
                    promisse(.success(response.body!))
                case let .failure(error):
                    promisse(.failure(error))
                }
            }
        }.eraseToAnyPublisher()
    }

    /**
     Create a new Participant for the given Study.
     - POST /study/{study_id}/participant
     - Create a new Participant for the given Study.
     - API Key:
       - type: apiKey Authorization 
       - name: Authorization
     - parameter studyId: (path)  
     - parameter participant: (body)  
     - returns: RequestBuilder<String> 
     */
    open class func participantCreateWithRequestBuilder(studyId: String, participant: Participant) -> RequestBuilder<String> {
        var path = "/study/{study_id}/participant"
        let studyIdPreEscape = "\(APIHelper.mapValueToPathItem(studyId))"
        let studyIdPostEscape = studyIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{study_id}", with: studyIdPostEscape, options: .literal, range: nil)
        let URLString = LAMPAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: participant)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<String>.Type = LAMPAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     Delete a participant AND all owned data or event streams.
     
     - parameter participantId: (path)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - returns: AnyPublisher<String, Error>
     */
    @available(OSX 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func participantDelete(participantId: String, apiResponseQueue: DispatchQueue = LAMPAPI.apiResponseQueue) -> AnyPublisher<String, Error> {
        return Future<String, Error>.init { promisse in
            participantDeleteWithRequestBuilder(participantId: participantId).execute(apiResponseQueue) { result -> Void in
                switch result {
                case let .success(response):
                    promisse(.success(response.body!))
                case let .failure(error):
                    promisse(.failure(error))
                }
            }
        }.eraseToAnyPublisher()
    }

    /**
     Delete a participant AND all owned data or event streams.
     - DELETE /participant/{participant_id}
     - Delete a participant AND all owned data or event streams.
     - API Key:
       - type: apiKey Authorization 
       - name: Authorization
     - parameter participantId: (path)  
     - returns: RequestBuilder<String> 
     */
    open class func participantDeleteWithRequestBuilder(participantId: String) -> RequestBuilder<String> {
        var path = "/participant/{participant_id}"
        let participantIdPreEscape = "\(APIHelper.mapValueToPathItem(participantId))"
        let participantIdPostEscape = participantIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{participant_id}", with: participantIdPostEscape, options: .literal, range: nil)
        let URLString = LAMPAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<String>.Type = LAMPAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "DELETE", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Update a Participant's settings.
     
     - parameter participantId: (path)  
     - parameter participant: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - returns: AnyPublisher<String, Error>
     */
    @available(OSX 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func participantUpdate(participantId: String, participant: Participant, apiResponseQueue: DispatchQueue = LAMPAPI.apiResponseQueue) -> AnyPublisher<String, Error> {
        return Future<String, Error>.init { promisse in
            participantUpdateWithRequestBuilder(participantId: participantId, participant: participant).execute(apiResponseQueue) { result -> Void in
                switch result {
                case let .success(response):
                    promisse(.success(response.body!))
                case let .failure(error):
                    promisse(.failure(error))
                }
            }
        }.eraseToAnyPublisher()
    }

    /**
     Update a Participant's settings.
     - PUT /participant/{participant_id}
     - Update a Participant's settings.
     - API Key:
       - type: apiKey Authorization 
       - name: Authorization
     - parameter participantId: (path)  
     - parameter participant: (body)  
     - returns: RequestBuilder<String> 
     */
    open class func participantUpdateWithRequestBuilder(participantId: String, participant: Participant) -> RequestBuilder<String> {
        var path = "/participant/{participant_id}"
        let participantIdPreEscape = "\(APIHelper.mapValueToPathItem(participantId))"
        let participantIdPostEscape = participantIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{participant_id}", with: participantIdPostEscape, options: .literal, range: nil)
        let URLString = LAMPAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: participant)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<String>.Type = LAMPAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     Get a single participant, by identifier.
     
     - parameter participantId: (path)  
     - parameter transform: (query)  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - returns: AnyPublisher<[Any], Error>
     */
    @available(OSX 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func participantView(participantId: String, transform: String? = nil, apiResponseQueue: DispatchQueue = LAMPAPI.apiResponseQueue) -> AnyPublisher<[Any], Error> {
        return Future<[Any], Error>.init { promisse in
            participantViewWithRequestBuilder(participantId: participantId, transform: transform).execute(apiResponseQueue) { result -> Void in
                switch result {
                case let .success(response):
                    promisse(.success(response.body!))
                case let .failure(error):
                    promisse(.failure(error))
                }
            }
        }.eraseToAnyPublisher()
    }

    /**
     Get a single participant, by identifier.
     - GET /participant/{participant_id}
     - Get a single participant, by identifier.
     - API Key:
       - type: apiKey Authorization 
       - name: Authorization
     - parameter participantId: (path)  
     - parameter transform: (query)  (optional)
     - returns: RequestBuilder<[Any]> 
     */
    open class func participantViewWithRequestBuilder(participantId: String, transform: String? = nil) -> RequestBuilder<[Any]> {
        var path = "/participant/{participant_id}"
        let participantIdPreEscape = "\(APIHelper.mapValueToPathItem(participantId))"
        let participantIdPostEscape = participantIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{participant_id}", with: participantIdPostEscape, options: .literal, range: nil)
        let URLString = LAMPAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "transform": transform?.encodeToJSON()
        ])

        let requestBuilder: RequestBuilder<[Any]>.Type = LAMPAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

}
}
