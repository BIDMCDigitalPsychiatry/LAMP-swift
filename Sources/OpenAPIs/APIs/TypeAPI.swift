//
// TypeAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
import Combine



open class TypeAPI {
    /**

     - parameter typeId: (path)
     - parameter attachmentKey: (path)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - returns: AnyPublisher<Any, Error>
     */
    @available(OSX 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func typeGetAttachment(typeId: String, attachmentKey: String, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue) -> AnyPublisher<Any, Error> {
        return Future<Any, Error>.init { promise in
            typeGetAttachmentWithRequestBuilder(typeId: typeId, attachmentKey: attachmentKey).execute(apiResponseQueue) { result -> Void in
                switch result {
                case let .success(response):
                    promise(.success(response.body!))
                case let .failure(error):
                    promise(.failure(error))
                }
            }
        }.eraseToAnyPublisher()
    }

    /**
     - GET /type/{type_id}/attachment/{attachment_key}
     - API Key:
       - type: apiKey Authorization
       - name: Authorization
     - parameter typeId: (path)
     - parameter attachmentKey: (path)
     - returns: RequestBuilder<Any>
     */
    open class func typeGetAttachmentWithRequestBuilder(typeId: String, attachmentKey: String) -> RequestBuilder<AnyCodable> {
        var path = "/type/{type_id}/attachment/{attachment_key}"
        let typeIdPreEscape = "\(APIHelper.mapValueToPathItem(typeId))"
        let typeIdPostEscape = typeIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{type_id}", with: typeIdPostEscape, options: .literal, range: nil)
        let attachmentKeyPreEscape = "\(APIHelper.mapValueToPathItem(attachmentKey))"
        let attachmentKeyPostEscape = attachmentKeyPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{attachment_key}", with: attachmentKeyPostEscape, options: .literal, range: nil)
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:AnyCodable]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<AnyCodable>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter typeId: (path)
     - parameter attachmentKey: (path)
     - parameter invokeAlways: (query)
     - parameter includeLogs: (query)
     - parameter ignoreOutput: (query)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - returns: AnyPublisher<Any, Error>
     */
    @available(OSX 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func typeGetDynamicAttachment(typeId: String, attachmentKey: String, invokeAlways: Bool, includeLogs: Bool, ignoreOutput: Bool, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue) -> AnyPublisher<Any, Error> {
        return Future<Any, Error>.init { promise in
            typeGetDynamicAttachmentWithRequestBuilder(typeId: typeId, attachmentKey: attachmentKey, invokeAlways: invokeAlways, includeLogs: includeLogs, ignoreOutput: ignoreOutput).execute(apiResponseQueue) { result -> Void in
                switch result {
                case let .success(response):
                    promise(.success(response.body!))
                case let .failure(error):
                    promise(.failure(error))
                }
            }
        }.eraseToAnyPublisher()
    }

    /**
     - GET /type/{type_id}/attachment/dynamic/{attachment_key}
     - API Key:
       - type: apiKey Authorization
       - name: Authorization
     - parameter typeId: (path)
     - parameter attachmentKey: (path)
     - parameter invokeAlways: (query)
     - parameter includeLogs: (query)
     - parameter ignoreOutput: (query)
     - returns: RequestBuilder<Any>
     */
    open class func typeGetDynamicAttachmentWithRequestBuilder(typeId: String, attachmentKey: String, invokeAlways: Bool, includeLogs: Bool, ignoreOutput: Bool) -> RequestBuilder<AnyCodable> {
        var path = "/type/{type_id}/attachment/dynamic/{attachment_key}"
        let typeIdPreEscape = "\(APIHelper.mapValueToPathItem(typeId))"
        let typeIdPostEscape = typeIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{type_id}", with: typeIdPostEscape, options: .literal, range: nil)
        let attachmentKeyPreEscape = "\(APIHelper.mapValueToPathItem(attachmentKey))"
        let attachmentKeyPostEscape = attachmentKeyPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{attachment_key}", with: attachmentKeyPostEscape, options: .literal, range: nil)
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:AnyCodable]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "invoke_always": invokeAlways.encodeToJSON(),
            "include_logs": includeLogs.encodeToJSON(),
            "ignore_output": ignoreOutput.encodeToJSON()
        ])

        let requestBuilder: RequestBuilder<AnyCodable>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter typeId: (path)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - returns: AnyPublisher<Any, Error>
     */
    @available(OSX 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func typeListAttachments(typeId: String, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue) -> AnyPublisher<Any, Error> {
        return Future<Any, Error>.init { promise in
            typeListAttachmentsWithRequestBuilder(typeId: typeId).execute(apiResponseQueue) { result -> Void in
                switch result {
                case let .success(response):
                    promise(.success(response.body!))
                case let .failure(error):
                    promise(.failure(error))
                }
            }
        }.eraseToAnyPublisher()
    }

    /**
     - GET /type/{type_id}/attachment
     - API Key:
       - type: apiKey Authorization
       - name: Authorization
     - parameter typeId: (path)
     - returns: RequestBuilder<Any>
     */
    open class func typeListAttachmentsWithRequestBuilder(typeId: String) -> RequestBuilder<AnyCodable> {
        var path = "/type/{type_id}/attachment"
        let typeIdPreEscape = "\(APIHelper.mapValueToPathItem(typeId))"
        let typeIdPostEscape = typeIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{type_id}", with: typeIdPostEscape, options: .literal, range: nil)
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:AnyCodable]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<AnyCodable>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Find the owner(s) of the resource.
     
     - parameter typeId: (path)
     - parameter transform: (query)  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - returns: AnyPublisher<String, Error>
     */
    @available(OSX 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func typeParent(typeId: String, transform: String? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue) -> AnyPublisher<String, Error> {
        return Future<String, Error>.init { promise in
            typeParentWithRequestBuilder(typeId: typeId, transform: transform).execute(apiResponseQueue) { result -> Void in
                switch result {
                case let .success(response):
                    promise(.success(response.body!))
                case let .failure(error):
                    promise(.failure(error))
                }
            }
        }.eraseToAnyPublisher()
    }

    /**
     Find the owner(s) of the resource.
     - GET /type/{type_id}/parent
     - Get the parent type identifier of the data structure referenced by the identifier.
     - API Key:
       - type: apiKey Authorization
       - name: Authorization
     - parameter typeId: (path)
     - parameter transform: (query)  (optional)
     - returns: RequestBuilder<String>
     */
    open class func typeParentWithRequestBuilder(typeId: String, transform: String? = nil) -> RequestBuilder<String> {
        var path = "/type/{type_id}/parent"
        let typeIdPreEscape = "\(APIHelper.mapValueToPathItem(typeId))"
        let typeIdPostEscape = typeIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{type_id}", with: typeIdPostEscape, options: .literal, range: nil)
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "transform": transform?.encodeToJSON()
        ])

        let requestBuilder: RequestBuilder<String>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter typeId: (path)
     - parameter target: (path)
     - parameter attachmentKey: (path)
     - parameter body: (body)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - returns: AnyPublisher<Any, Error>
     */
    @available(OSX 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func typeSetAttachment(typeId: String, target: String, attachmentKey: String, body: AnyCodable, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue) -> AnyPublisher<AnyCodable, Error> {
        return Future<AnyCodable, Error>.init { promise in
            typeSetAttachmentWithRequestBuilder(typeId: typeId, target: target, attachmentKey: attachmentKey, body: body).execute(apiResponseQueue) { result -> Void in
                switch result {
                case let .success(response):
                    promise(.success(response.body!))
                case let .failure(error):
                    promise(.failure(error))
                }
            }
        }.eraseToAnyPublisher()
    }

    /**
     - PUT /type/{type_id}/attachment/{attachment_key}/{target}
     - API Key:
       - type: apiKey Authorization
       - name: Authorization
     - parameter typeId: (path)
     - parameter target: (path)
     - parameter attachmentKey: (path)
     - parameter body: (body)
     - returns: RequestBuilder<Any>
     */
    open class func typeSetAttachmentWithRequestBuilder(typeId: String, target: String, attachmentKey: String, body: AnyCodable) -> RequestBuilder<AnyCodable> {
        var path = "/type/{type_id}/attachment/{attachment_key}/{target}"
        let typeIdPreEscape = "\(APIHelper.mapValueToPathItem(typeId))"
        let typeIdPostEscape = typeIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{type_id}", with: typeIdPostEscape, options: .literal, range: nil)
        let targetPreEscape = "\(APIHelper.mapValueToPathItem(target))"
        let targetPostEscape = targetPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{target}", with: targetPostEscape, options: .literal, range: nil)
        let attachmentKeyPreEscape = "\(APIHelper.mapValueToPathItem(attachmentKey))"
        let attachmentKeyPostEscape = attachmentKeyPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{attachment_key}", with: attachmentKeyPostEscape, options: .literal, range: nil)
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<AnyCodable>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**

     - parameter typeId: (path)
     - parameter target: (path)
     - parameter attachmentKey: (path)
     - parameter invokeOnce: (query)
     - parameter dynamicAttachment: (body)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - returns: AnyPublisher<Any, Error>
     */
    @available(OSX 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func typeSetDynamicAttachment(typeId: String, target: String, attachmentKey: String, invokeOnce: Bool, dynamicAttachment: DynamicAttachment, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue) -> AnyPublisher<Any, Error> {
        return Future<Any, Error>.init { promise in
            typeSetDynamicAttachmentWithRequestBuilder(typeId: typeId, target: target, attachmentKey: attachmentKey, invokeOnce: invokeOnce, dynamicAttachment: dynamicAttachment).execute(apiResponseQueue) { result -> Void in
                switch result {
                case let .success(response):
                    promise(.success(response.body!))
                case let .failure(error):
                    promise(.failure(error))
                }
            }
        }.eraseToAnyPublisher()
    }

    /**
     - PUT /type/{type_id}/attachment/dynamic/{attachment_key}/{target}
     - API Key:
       - type: apiKey Authorization
       - name: Authorization
     - parameter typeId: (path)
     - parameter target: (path)
     - parameter attachmentKey: (path)
     - parameter invokeOnce: (query)
     - parameter dynamicAttachment: (body)
     - returns: RequestBuilder<Any>
     */
    open class func typeSetDynamicAttachmentWithRequestBuilder(typeId: String, target: String, attachmentKey: String, invokeOnce: Bool, dynamicAttachment: DynamicAttachment) -> RequestBuilder<AnyCodable> {
        var path = "/type/{type_id}/attachment/dynamic/{attachment_key}/{target}"
        let typeIdPreEscape = "\(APIHelper.mapValueToPathItem(typeId))"
        let typeIdPostEscape = typeIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{type_id}", with: typeIdPostEscape, options: .literal, range: nil)
        let targetPreEscape = "\(APIHelper.mapValueToPathItem(target))"
        let targetPostEscape = targetPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{target}", with: targetPostEscape, options: .literal, range: nil)
        let attachmentKeyPreEscape = "\(APIHelper.mapValueToPathItem(attachmentKey))"
        let attachmentKeyPostEscape = attachmentKeyPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{attachment_key}", with: attachmentKeyPostEscape, options: .literal, range: nil)
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: dynamicAttachment)

        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "invoke_once": invokeOnce.encodeToJSON()
        ])

        let requestBuilder: RequestBuilder<AnyCodable>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

}
