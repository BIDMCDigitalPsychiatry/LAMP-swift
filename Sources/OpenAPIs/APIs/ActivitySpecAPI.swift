//
// ActivitySpecAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
import Combine



open class ActivitySpecAPI {
    /**
     Get all ActivitySpecs registered.
     
     - parameter transform: (query)  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - returns: AnyPublisher<[Any], Error>
     */
    @available(OSX 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func activitySpecAll(transform: String? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue) -> AnyPublisher<[Any], Error> {
        return Future<[Any], Error>.init { promise in
            activitySpecAllWithRequestBuilder(transform: transform).execute(apiResponseQueue) { result -> Void in
                switch result {
                case let .success(response):
                    promise(.success(response.body!))
                case let .failure(error):
                    promise(.failure(error))
                }
            }
        }.eraseToAnyPublisher()
    }

    /**
     Get all ActivitySpecs registered.
     - GET /activity_spec
     - Get all ActivitySpecs registered.
     - API Key:
       - type: apiKey Authorization 
       - name: Authorization
     - parameter transform: (query)  (optional)
     - returns: RequestBuilder<[Any]> 
     */
    open class func activitySpecAllWithRequestBuilder(transform: String? = nil) -> RequestBuilder<[Any]> {
        let path = "/activity_spec"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "transform": transform?.encodeToJSON()
        ])

        let requestBuilder: RequestBuilder<[Any]>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Create a new ActivitySpec.
     
     - parameter activitySpec: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - returns: AnyPublisher<String, Error>
     */
    @available(OSX 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func activitySpecCreate(activitySpec: ActivitySpec, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue) -> AnyPublisher<String, Error> {
        return Future<String, Error>.init { promise in
            activitySpecCreateWithRequestBuilder(activitySpec: activitySpec).execute(apiResponseQueue) { result -> Void in
                switch result {
                case let .success(response):
                    promise(.success(response.body!))
                case let .failure(error):
                    promise(.failure(error))
                }
            }
        }.eraseToAnyPublisher()
    }

    /**
     Create a new ActivitySpec.
     - POST /activity_spec
     - Create a new ActivitySpec.
     - API Key:
       - type: apiKey Authorization 
       - name: Authorization
     - parameter activitySpec: (body)  
     - returns: RequestBuilder<String> 
     */
    open class func activitySpecCreateWithRequestBuilder(activitySpec: ActivitySpec) -> RequestBuilder<String> {
        let path = "/activity_spec"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: activitySpec)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<String>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     Delete an ActivitySpec.
     
     - parameter activitySpecName: (path)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - returns: AnyPublisher<String, Error>
     */
    @available(OSX 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func activitySpecDelete(activitySpecName: String, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue) -> AnyPublisher<String, Error> {
        return Future<String, Error>.init { promise in
            activitySpecDeleteWithRequestBuilder(activitySpecName: activitySpecName).execute(apiResponseQueue) { result -> Void in
                switch result {
                case let .success(response):
                    promise(.success(response.body!))
                case let .failure(error):
                    promise(.failure(error))
                }
            }
        }.eraseToAnyPublisher()
    }

    /**
     Delete an ActivitySpec.
     - DELETE /activity_spec/{activity_spec_name}
     - Delete an ActivitySpec.
     - API Key:
       - type: apiKey Authorization 
       - name: Authorization
     - parameter activitySpecName: (path)  
     - returns: RequestBuilder<String> 
     */
    open class func activitySpecDeleteWithRequestBuilder(activitySpecName: String) -> RequestBuilder<String> {
        var path = "/activity_spec/{activity_spec_name}"
        let activitySpecNamePreEscape = "\(APIHelper.mapValueToPathItem(activitySpecName))"
        let activitySpecNamePostEscape = activitySpecNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{activity_spec_name}", with: activitySpecNamePostEscape, options: .literal, range: nil)
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<String>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "DELETE", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Update an ActivitySpec.
     
     - parameter activitySpecName: (path)  
     - parameter activitySpec: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - returns: AnyPublisher<String, Error>
     */
    @available(OSX 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func activitySpecUpdate(activitySpecName: String, activitySpec: ActivitySpec, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue) -> AnyPublisher<String, Error> {
        return Future<String, Error>.init { promise in
            activitySpecUpdateWithRequestBuilder(activitySpecName: activitySpecName, activitySpec: activitySpec).execute(apiResponseQueue) { result -> Void in
                switch result {
                case let .success(response):
                    promise(.success(response.body!))
                case let .failure(error):
                    promise(.failure(error))
                }
            }
        }.eraseToAnyPublisher()
    }

    /**
     Update an ActivitySpec.
     - PUT /activity_spec/{activity_spec_name}
     - Update an ActivitySpec.
     - API Key:
       - type: apiKey Authorization 
       - name: Authorization
     - parameter activitySpecName: (path)  
     - parameter activitySpec: (body)  
     - returns: RequestBuilder<String> 
     */
    open class func activitySpecUpdateWithRequestBuilder(activitySpecName: String, activitySpec: ActivitySpec) -> RequestBuilder<String> {
        var path = "/activity_spec/{activity_spec_name}"
        let activitySpecNamePreEscape = "\(APIHelper.mapValueToPathItem(activitySpecName))"
        let activitySpecNamePostEscape = activitySpecNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{activity_spec_name}", with: activitySpecNamePostEscape, options: .literal, range: nil)
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: activitySpec)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<String>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     View an ActivitySpec.
     
     - parameter activitySpecName: (path)  
     - parameter transform: (query)  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - returns: AnyPublisher<String, Error>
     */
    @available(OSX 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func activitySpecView(activitySpecName: String, transform: String? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue) -> AnyPublisher<String, Error> {
        return Future<String, Error>.init { promise in
            activitySpecViewWithRequestBuilder(activitySpecName: activitySpecName, transform: transform).execute(apiResponseQueue) { result -> Void in
                switch result {
                case let .success(response):
                    promise(.success(response.body!))
                case let .failure(error):
                    promise(.failure(error))
                }
            }
        }.eraseToAnyPublisher()
    }

    /**
     View an ActivitySpec.
     - GET /activity_spec/{activity_spec_name}
     - View an ActivitySpec.
     - API Key:
       - type: apiKey Authorization 
       - name: Authorization
     - parameter activitySpecName: (path)  
     - parameter transform: (query)  (optional)
     - returns: RequestBuilder<String> 
     */
    open class func activitySpecViewWithRequestBuilder(activitySpecName: String, transform: String? = nil) -> RequestBuilder<String> {
        var path = "/activity_spec/{activity_spec_name}"
        let activitySpecNamePreEscape = "\(APIHelper.mapValueToPathItem(activitySpecName))"
        let activitySpecNamePostEscape = activitySpecNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{activity_spec_name}", with: activitySpecNamePostEscape, options: .literal, range: nil)
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "transform": transform?.encodeToJSON()
        ])

        let requestBuilder: RequestBuilder<String>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

}
