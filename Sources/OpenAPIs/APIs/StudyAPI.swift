//
// StudyAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
import Combine



open class StudyAPI {
    /**
     Get the set of all studies.
     
     - parameter transform: (query)  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - returns: AnyPublisher<[Any], Error>
     */
    @available(OSX 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func studyAll(transform: String? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue) -> AnyPublisher<[Any], Error> {
        return Future<[Any], Error>.init { promise in
            studyAllWithRequestBuilder(transform: transform).execute(apiResponseQueue) { result -> Void in
                switch result {
                case let .success(response):
                    promise(.success(response.body!))
                case let .failure(error):
                    promise(.failure(error))
                }
            }
        }.eraseToAnyPublisher()
    }

    /**
     Get the set of all studies.
     - GET /study
     - Get the set of all studies.
     - API Key:
       - type: apiKey Authorization 
       - name: Authorization
     - parameter transform: (query)  (optional)
     - returns: RequestBuilder<[Any]> 
     */
    open class func studyAllWithRequestBuilder(transform: String? = nil) -> RequestBuilder<[Any]> {
        let path = "/study"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "transform": transform?.encodeToJSON()
        ])

        let requestBuilder: RequestBuilder<[Any]>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Get the set of studies for a single researcher.
     
     - parameter researcherId: (path)  
     - parameter transform: (query)  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - returns: AnyPublisher<[Any], Error>
     */
    @available(OSX 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func studyAllByResearcher(researcherId: String, transform: String? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue) -> AnyPublisher<[Any], Error> {
        return Future<[Any], Error>.init { promise in
            studyAllByResearcherWithRequestBuilder(researcherId: researcherId, transform: transform).execute(apiResponseQueue) { result -> Void in
                switch result {
                case let .success(response):
                    promise(.success(response.body!))
                case let .failure(error):
                    promise(.failure(error))
                }
            }
        }.eraseToAnyPublisher()
    }

    /**
     Get the set of studies for a single researcher.
     - GET /researcher/{researcher_id}/study
     - Get the set of studies for a single researcher.
     - API Key:
       - type: apiKey Authorization 
       - name: Authorization
     - parameter researcherId: (path)  
     - parameter transform: (query)  (optional)
     - returns: RequestBuilder<[Any]> 
     */
    open class func studyAllByResearcherWithRequestBuilder(researcherId: String, transform: String? = nil) -> RequestBuilder<[Any]> {
        var path = "/researcher/{researcher_id}/study"
        let researcherIdPreEscape = "\(APIHelper.mapValueToPathItem(researcherId))"
        let researcherIdPostEscape = researcherIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{researcher_id}", with: researcherIdPostEscape, options: .literal, range: nil)
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "transform": transform?.encodeToJSON()
        ])

        let requestBuilder: RequestBuilder<[Any]>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Create a new Study for the given Researcher.
     
     - parameter researcherId: (path)  
     - parameter study: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - returns: AnyPublisher<String, Error>
     */
    @available(OSX 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func studyCreate(researcherId: String, study: Study, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue) -> AnyPublisher<String, Error> {
        return Future<String, Error>.init { promise in
            studyCreateWithRequestBuilder(researcherId: researcherId, study: study).execute(apiResponseQueue) { result -> Void in
                switch result {
                case let .success(response):
                    promise(.success(response.body!))
                case let .failure(error):
                    promise(.failure(error))
                }
            }
        }.eraseToAnyPublisher()
    }

    /**
     Create a new Study for the given Researcher.
     - POST /researcher/{researcher_id}/study
     - Create a new Study for the given Researcher.
     - API Key:
       - type: apiKey Authorization 
       - name: Authorization
     - parameter researcherId: (path)  
     - parameter study: (body)  
     - returns: RequestBuilder<String> 
     */
    open class func studyCreateWithRequestBuilder(researcherId: String, study: Study) -> RequestBuilder<String> {
        var path = "/researcher/{researcher_id}/study"
        let researcherIdPreEscape = "\(APIHelper.mapValueToPathItem(researcherId))"
        let researcherIdPostEscape = researcherIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{researcher_id}", with: researcherIdPostEscape, options: .literal, range: nil)
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: study)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<String>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     Delete a study.
     
     - parameter studyId: (path)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - returns: AnyPublisher<String, Error>
     */
    @available(OSX 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func studyDelete(studyId: String, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue) -> AnyPublisher<String, Error> {
        return Future<String, Error>.init { promise in
            studyDeleteWithRequestBuilder(studyId: studyId).execute(apiResponseQueue) { result -> Void in
                switch result {
                case let .success(response):
                    promise(.success(response.body!))
                case let .failure(error):
                    promise(.failure(error))
                }
            }
        }.eraseToAnyPublisher()
    }

    /**
     Delete a study.
     - DELETE /study/{study_id}
     - Delete a study.
     - API Key:
       - type: apiKey Authorization 
       - name: Authorization
     - parameter studyId: (path)  
     - returns: RequestBuilder<String> 
     */
    open class func studyDeleteWithRequestBuilder(studyId: String) -> RequestBuilder<String> {
        var path = "/study/{study_id}"
        let studyIdPreEscape = "\(APIHelper.mapValueToPathItem(studyId))"
        let studyIdPostEscape = studyIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{study_id}", with: studyIdPostEscape, options: .literal, range: nil)
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<String>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "DELETE", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Update the study.
     
     - parameter studyId: (path)  
     - parameter study: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - returns: AnyPublisher<String, Error>
     */
    @available(OSX 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func studyUpdate(studyId: String, study: Study, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue) -> AnyPublisher<String, Error> {
        return Future<String, Error>.init { promise in
            studyUpdateWithRequestBuilder(studyId: studyId, study: study).execute(apiResponseQueue) { result -> Void in
                switch result {
                case let .success(response):
                    promise(.success(response.body!))
                case let .failure(error):
                    promise(.failure(error))
                }
            }
        }.eraseToAnyPublisher()
    }

    /**
     Update the study.
     - PUT /study/{study_id}
     - Update the study.
     - API Key:
       - type: apiKey Authorization 
       - name: Authorization
     - parameter studyId: (path)  
     - parameter study: (body)  
     - returns: RequestBuilder<String> 
     */
    open class func studyUpdateWithRequestBuilder(studyId: String, study: Study) -> RequestBuilder<String> {
        var path = "/study/{study_id}"
        let studyIdPreEscape = "\(APIHelper.mapValueToPathItem(studyId))"
        let studyIdPostEscape = studyIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{study_id}", with: studyIdPostEscape, options: .literal, range: nil)
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: study)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<String>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     Get a single study, by identifier.
     
     - parameter studyId: (path)  
     - parameter transform: (query)  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - returns: AnyPublisher<[Any], Error>
     */
    @available(OSX 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func studyView(studyId: String, transform: String? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue) -> AnyPublisher<[Any], Error> {
        return Future<[Any], Error>.init { promise in
            studyViewWithRequestBuilder(studyId: studyId, transform: transform).execute(apiResponseQueue) { result -> Void in
                switch result {
                case let .success(response):
                    promise(.success(response.body!))
                case let .failure(error):
                    promise(.failure(error))
                }
            }
        }.eraseToAnyPublisher()
    }

    /**
     Get a single study, by identifier.
     - GET /study/{study_id}
     - Get a single study, by identifier.
     - API Key:
       - type: apiKey Authorization 
       - name: Authorization
     - parameter studyId: (path)  
     - parameter transform: (query)  (optional)
     - returns: RequestBuilder<[Any]> 
     */
    open class func studyViewWithRequestBuilder(studyId: String, transform: String? = nil) -> RequestBuilder<[Any]> {
        var path = "/study/{study_id}"
        let studyIdPreEscape = "\(APIHelper.mapValueToPathItem(studyId))"
        let studyIdPostEscape = studyIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{study_id}", with: studyIdPostEscape, options: .literal, range: nil)
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "transform": transform?.encodeToJSON()
        ])

        let requestBuilder: RequestBuilder<[Any]>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

}
