//
// DurationIntervalLegacy.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
//import AnyCodable

public struct DurationIntervalLegacy: Codable {
    
    public enum RepeatType: String, Codable {

        case hourly
        case every3h
        case every6h
        case every12h
        case daily
        case biweekly
        case triweekly
        case weekly
        case bimonthly
        case monthly
        case custom
        case fortnightly //every 14 days
        case none
    }

    public var repeatType: RepeatType?
    /** The UNIX Epoch date-time representation: number of milliseconds since 1/1/1970 12:00 AM. */
    public var startDate: Date?
    public var time: Date?
    public var customTimes: [Date]?
    public var notificationId: [Int64]?

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case repeatType = "repeat_interval"
        case startDate = "start_date"
        case customTimes = "custom_time"
        case time
        case notificationId = "notification_ids"
    }
    
    public init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: CodingKeys.self)
        startDate = try? container.decodeIfPresent(Date.self, forKey: .startDate)
        time = try? container.decodeIfPresent(Date.self, forKey: .time)
        customTimes = try? container.decodeIfPresent([Date].self, forKey: .customTimes)
        notificationId = try? container.decodeIfPresent([Int64].self, forKey: .notificationId)
        if let repeatinterval = try? container.decodeIfPresent(String.self, forKey: .repeatType), let rtype = RepeatType(rawValue: repeatinterval) {
            repeatType = rtype
        }
    }

    public init(repeatType: RepeatType?, startDate: Date?, time: Date?, customTimes: [Date]?, notificationId: [Int64]?) {
        self.repeatType = repeatType
        self.startDate = startDate
        self.time = time
        self.customTimes = customTimes
        self.notificationId = notificationId
    }
}

