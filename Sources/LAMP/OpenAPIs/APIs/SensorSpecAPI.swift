//
// SensorSpecAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
import Combine



open class SensorSpecAPI {
    /**
     Get all SensorSpecs registered.
     
     - parameter transform: (query)  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - returns: AnyPublisher<[Any], Error>
     */
    @available(OSX 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func sensorSpecAll(transform: String? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue) -> AnyPublisher<[Any], Error> {
        return Future<[Any], Error>.init { promise in
            sensorSpecAllWithRequestBuilder(transform: transform).execute(apiResponseQueue) { result -> Void in
                switch result {
                case let .success(response):
                    promise(.success(response.body!))
                case let .failure(error):
                    promise(.failure(error))
                }
            }
        }.eraseToAnyPublisher()
    }

    /**
     Get all SensorSpecs registered.
     - GET /sensor_spec
     - Get all SensorSpecs registered by any Researcher.
     - API Key:
       - type: apiKey Authorization
       - name: Authorization
     - parameter transform: (query)  (optional)
     - returns: RequestBuilder<[Any]>
     */
    open class func sensorSpecAllWithRequestBuilder(transform: String? = nil) -> RequestBuilder<[AnyCodable]> {
        let path = "/sensor_spec"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:AnyCodable]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "transform": transform?.encodeToJSON()
        ])

        let requestBuilder: RequestBuilder<[AnyCodable]>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Create a new SensorSpec.
     
     - parameter sensorSpec: (body)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - returns: AnyPublisher<String, Error>
     */
    @available(OSX 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func sensorSpecCreate(sensorSpec: SensorSpec, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue) -> AnyPublisher<String, Error> {
        return Future<String, Error>.init { promise in
            sensorSpecCreateWithRequestBuilder(sensorSpec: sensorSpec).execute(apiResponseQueue) { result -> Void in
                switch result {
                case let .success(response):
                    promise(.success(response.body!))
                case let .failure(error):
                    promise(.failure(error))
                }
            }
        }.eraseToAnyPublisher()
    }

    /**
     Create a new SensorSpec.
     - POST /sensor_spec
     - Create a new SensorSpec.
     - API Key:
       - type: apiKey Authorization
       - name: Authorization
     - parameter sensorSpec: (body)
     - returns: RequestBuilder<String>
     */
    open class func sensorSpecCreateWithRequestBuilder(sensorSpec: SensorSpec) -> RequestBuilder<String> {
        let path = "/sensor_spec"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: sensorSpec)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<String>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     Delete an SensorSpec.
     
     - parameter sensorSpecName: (path)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - returns: AnyPublisher<String, Error>
     */
    @available(OSX 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func sensorSpecDelete(sensorSpecName: String, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue) -> AnyPublisher<String, Error> {
        return Future<String, Error>.init { promise in
            sensorSpecDeleteWithRequestBuilder(sensorSpecName: sensorSpecName).execute(apiResponseQueue) { result -> Void in
                switch result {
                case let .success(response):
                    promise(.success(response.body!))
                case let .failure(error):
                    promise(.failure(error))
                }
            }
        }.eraseToAnyPublisher()
    }

    /**
     Delete an SensorSpec.
     - DELETE /sensor_spec/{sensor_spec_name}
     - Delete an SensorSpec.
     - API Key:
       - type: apiKey Authorization
       - name: Authorization
     - parameter sensorSpecName: (path)
     - returns: RequestBuilder<String>
     */
    open class func sensorSpecDeleteWithRequestBuilder(sensorSpecName: String) -> RequestBuilder<String> {
        var path = "/sensor_spec/{sensor_spec_name}"
        let sensorSpecNamePreEscape = "\(APIHelper.mapValueToPathItem(sensorSpecName))"
        let sensorSpecNamePostEscape = sensorSpecNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{sensor_spec_name}", with: sensorSpecNamePostEscape, options: .literal, range: nil)
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<String>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "DELETE", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Update an SensorSpec.
     
     - parameter sensorSpecName: (path)
     - parameter sensorSpec: (body)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - returns: AnyPublisher<String, Error>
     */
    @available(OSX 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func sensorSpecUpdate(sensorSpecName: String, sensorSpec: SensorSpec, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue) -> AnyPublisher<String, Error> {
        return Future<String, Error>.init { promise in
            sensorSpecUpdateWithRequestBuilder(sensorSpecName: sensorSpecName, sensorSpec: sensorSpec).execute(apiResponseQueue) { result -> Void in
                switch result {
                case let .success(response):
                    promise(.success(response.body!))
                case let .failure(error):
                    promise(.failure(error))
                }
            }
        }.eraseToAnyPublisher()
    }

    /**
     Update an SensorSpec.
     - PUT /sensor_spec/{sensor_spec_name}
     - Update an SensorSpec.
     - API Key:
       - type: apiKey Authorization
       - name: Authorization
     - parameter sensorSpecName: (path)
     - parameter sensorSpec: (body)
     - returns: RequestBuilder<String>
     */
    open class func sensorSpecUpdateWithRequestBuilder(sensorSpecName: String, sensorSpec: SensorSpec) -> RequestBuilder<String> {
        var path = "/sensor_spec/{sensor_spec_name}"
        let sensorSpecNamePreEscape = "\(APIHelper.mapValueToPathItem(sensorSpecName))"
        let sensorSpecNamePostEscape = sensorSpecNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{sensor_spec_name}", with: sensorSpecNamePostEscape, options: .literal, range: nil)
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: sensorSpec)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<String>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     Get a SensorSpec.
     
     - parameter sensorSpecName: (path)
     - parameter transform: (query)  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - returns: AnyPublisher<[Any], Error>
     */
    @available(OSX 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func sensorSpecView(sensorSpecName: String, transform: String? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue) -> AnyPublisher<[Any], Error> {
        return Future<[Any], Error>.init { promise in
            sensorSpecViewWithRequestBuilder(sensorSpecName: sensorSpecName, transform: transform).execute(apiResponseQueue) { result -> Void in
                switch result {
                case let .success(response):
                    promise(.success(response.body!))
                case let .failure(error):
                    promise(.failure(error))
                }
            }
        }.eraseToAnyPublisher()
    }

    /**
     Get a SensorSpec.
     - GET /sensor_spec/{sensor_spec_name}
     - Get a SensorSpec.
     - API Key:
       - type: apiKey Authorization
       - name: Authorization
     - parameter sensorSpecName: (path)
     - parameter transform: (query)  (optional)
     - returns: RequestBuilder<[Any]>
     */
    open class func sensorSpecViewWithRequestBuilder(sensorSpecName: String, transform: String? = nil) -> RequestBuilder<[AnyCodable]> {
        var path = "/sensor_spec/{sensor_spec_name}"
        let sensorSpecNamePreEscape = "\(APIHelper.mapValueToPathItem(sensorSpecName))"
        let sensorSpecNamePostEscape = sensorSpecNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{sensor_spec_name}", with: sensorSpecNamePostEscape, options: .literal, range: nil)
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:AnyCodable]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "transform": transform?.encodeToJSON()
        ])

        let requestBuilder: RequestBuilder<[AnyCodable]>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

}
