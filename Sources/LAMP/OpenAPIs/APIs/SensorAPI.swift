//
// SensorAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
import Combine



open class SensorAPI {
    /**
     Get the set of all sensors.
     
     - parameter transform: (query)  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - returns: AnyPublisher<[Any], Error>
     */
    @available(OSX 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func sensorAll(transform: String? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue) -> AnyPublisher<[Any], Error> {
        return Future<[Any], Error>.init { promise in
            sensorAllWithRequestBuilder(transform: transform).execute(apiResponseQueue) { result -> Void in
                switch result {
                case let .success(response):
                    promise(.success(response.body!))
                case let .failure(error):
                    promise(.failure(error))
                }
            }
        }.eraseToAnyPublisher()
    }

    /**
     Get the set of all sensors.
     - GET /sensor
     - Get the set of all sensors.
     - API Key:
       - type: apiKey Authorization
       - name: Authorization
     - parameter transform: (query)  (optional)
     - returns: RequestBuilder<[Any]>
     */
    open class func sensorAllWithRequestBuilder(transform: String? = nil) -> RequestBuilder<[AnyCodable]> {
        let path = "/sensor"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:AnyCodable]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "transform": transform?.encodeToJSON()
        ])

        let requestBuilder: RequestBuilder<[AnyCodable]>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Get all sensors for a participant.
     
     - parameter participantId: (path)
     - parameter transform: (query)  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - returns: AnyPublisher<[Any], Error>
     */
    @available(OSX 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func sensorAllByParticipant(participantId: String, transform: String? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue) -> AnyPublisher<[Any], Error> {
        return Future<[Any], Error>.init { promise in
            sensorAllByParticipantWithRequestBuilder(participantId: participantId, transform: transform).execute(apiResponseQueue) { result -> Void in
                switch result {
                case let .success(response):
                    promise(.success(response.body!))
                case let .failure(error):
                    promise(.failure(error))
                }
            }
        }.eraseToAnyPublisher()
    }

    /**
     Get all sensors for a participant.
     - GET /participant/{participant_id}/sensor
     - Get the set of all sensors available to a participant, by participant  identifier.
     - API Key:
       - type: apiKey Authorization
       - name: Authorization
     - parameter participantId: (path)
     - parameter transform: (query)  (optional)
     - returns: RequestBuilder<[Any]>
     */
    open class func sensorAllByParticipantWithRequestBuilder(participantId: String, transform: String? = nil) -> RequestBuilder<[AnyCodable]> {
        var path = "/participant/{participant_id}/sensor"
        let participantIdPreEscape = "\(APIHelper.mapValueToPathItem(participantId))"
        let participantIdPostEscape = participantIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{participant_id}", with: participantIdPostEscape, options: .literal, range: nil)
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:AnyCodable]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "transform": transform?.encodeToJSON()
        ])

        let requestBuilder: RequestBuilder<[AnyCodable]>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Get all sensors for a researcher.
     
     - parameter researcherId: (path)
     - parameter transform: (query)  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - returns: AnyPublisher<[Any], Error>
     */
    @available(OSX 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func sensorAllByResearcher(researcherId: String, transform: String? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue) -> AnyPublisher<[Any], Error> {
        return Future<[Any], Error>.init { promise in
            sensorAllByResearcherWithRequestBuilder(researcherId: researcherId, transform: transform).execute(apiResponseQueue) { result -> Void in
                switch result {
                case let .success(response):
                    promise(.success(response.body!))
                case let .failure(error):
                    promise(.failure(error))
                }
            }
        }.eraseToAnyPublisher()
    }

    /**
     Get all sensors for a researcher.
     - GET /researcher/{researcher_id}/sensor
     - Get the set of all sensors available to participants of any study conducted  by a researcher, by researcher identifier.
     - API Key:
       - type: apiKey Authorization
       - name: Authorization
     - parameter researcherId: (path)
     - parameter transform: (query)  (optional)
     - returns: RequestBuilder<[Any]>
     */
    open class func sensorAllByResearcherWithRequestBuilder(researcherId: String, transform: String? = nil) -> RequestBuilder<[AnyCodable]> {
        var path = "/researcher/{researcher_id}/sensor"
        let researcherIdPreEscape = "\(APIHelper.mapValueToPathItem(researcherId))"
        let researcherIdPostEscape = researcherIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{researcher_id}", with: researcherIdPostEscape, options: .literal, range: nil)
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:AnyCodable]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "transform": transform?.encodeToJSON()
        ])

        let requestBuilder: RequestBuilder<[AnyCodable]>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     View all sensors in a study.
     
     - parameter studyId: (path)
     - parameter transform: (query)  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - returns: AnyPublisher<[Any], Error>
     */
    @available(OSX 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func sensorAllByStudy(studyId: String, transform: String? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue) -> AnyPublisher<[Any], Error> {
        return Future<[Any], Error>.init { promise in
            sensorAllByStudyWithRequestBuilder(studyId: studyId, transform: transform).execute(apiResponseQueue) { result -> Void in
                switch result {
                case let .success(response):
                    promise(.success(response.body!))
                case let .failure(error):
                    promise(.failure(error))
                }
            }
        }.eraseToAnyPublisher()
    }

    /**
     View all sensors in a study.
     - GET /study/{study_id}/sensor
     - Get the set of all sensors available to participants of a single  study, by study identifier.
     - API Key:
       - type: apiKey Authorization
       - name: Authorization
     - parameter studyId: (path)
     - parameter transform: (query)  (optional)
     - returns: RequestBuilder<[Any]>
     */
    open class func sensorAllByStudyWithRequestBuilder(studyId: String, transform: String? = nil) -> RequestBuilder<[AnyCodable]> {
        var path = "/study/{study_id}/sensor"
        let studyIdPreEscape = "\(APIHelper.mapValueToPathItem(studyId))"
        let studyIdPostEscape = studyIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{study_id}", with: studyIdPostEscape, options: .literal, range: nil)
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:AnyCodable]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "transform": transform?.encodeToJSON()
        ])

        let requestBuilder: RequestBuilder<[AnyCodable]>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Create a new Sensor under the given Study.
     
     - parameter studyId: (path)
     - parameter sensor: (body)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - returns: AnyPublisher<String, Error>
     */
    @available(OSX 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func sensorCreate(studyId: String, sensor: Sensor, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue) -> AnyPublisher<String, Error> {
        return Future<String, Error>.init { promise in
            sensorCreateWithRequestBuilder(studyId: studyId, sensor: sensor).execute(apiResponseQueue) { result -> Void in
                switch result {
                case let .success(response):
                    promise(.success(response.body!))
                case let .failure(error):
                    promise(.failure(error))
                }
            }
        }.eraseToAnyPublisher()
    }

    /**
     Create a new Sensor under the given Study.
     - POST /study/{study_id}/sensor
     - Create a new Sensor under the given Study.
     - API Key:
       - type: apiKey Authorization
       - name: Authorization
     - parameter studyId: (path)
     - parameter sensor: (body)
     - returns: RequestBuilder<String>
     */
    open class func sensorCreateWithRequestBuilder(studyId: String, sensor: Sensor) -> RequestBuilder<String> {
        var path = "/study/{study_id}/sensor"
        let studyIdPreEscape = "\(APIHelper.mapValueToPathItem(studyId))"
        let studyIdPostEscape = studyIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{study_id}", with: studyIdPostEscape, options: .literal, range: nil)
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: sensor)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<String>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     Delete a Sensor.
     
     - parameter sensorId: (path)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - returns: AnyPublisher<String, Error>
     */
    @available(OSX 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func sensorDelete(sensorId: String, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue) -> AnyPublisher<String, Error> {
        return Future<String, Error>.init { promise in
            sensorDeleteWithRequestBuilder(sensorId: sensorId).execute(apiResponseQueue) { result -> Void in
                switch result {
                case let .success(response):
                    promise(.success(response.body!))
                case let .failure(error):
                    promise(.failure(error))
                }
            }
        }.eraseToAnyPublisher()
    }

    /**
     Delete a Sensor.
     - DELETE /sensor/{sensor_id}
     - Delete a Sensor.
     - API Key:
       - type: apiKey Authorization
       - name: Authorization
     - parameter sensorId: (path)
     - returns: RequestBuilder<String>
     */
    open class func sensorDeleteWithRequestBuilder(sensorId: String) -> RequestBuilder<String> {
        var path = "/sensor/{sensor_id}"
        let sensorIdPreEscape = "\(APIHelper.mapValueToPathItem(sensorId))"
        let sensorIdPostEscape = sensorIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{sensor_id}", with: sensorIdPostEscape, options: .literal, range: nil)
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<String>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "DELETE", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Update an Sensor's settings.
     
     - parameter sensorId: (path)
     - parameter sensor: (body)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - returns: AnyPublisher<String, Error>
     */
    @available(OSX 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func sensorUpdate(sensorId: String, sensor: Sensor, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue) -> AnyPublisher<String, Error> {
        return Future<String, Error>.init { promise in
            sensorUpdateWithRequestBuilder(sensorId: sensorId, sensor: sensor).execute(apiResponseQueue) { result -> Void in
                switch result {
                case let .success(response):
                    promise(.success(response.body!))
                case let .failure(error):
                    promise(.failure(error))
                }
            }
        }.eraseToAnyPublisher()
    }

    /**
     Update an Sensor's settings.
     - PUT /sensor/{sensor_id}
     - Update an Sensor's settings.
     - API Key:
       - type: apiKey Authorization
       - name: Authorization
     - parameter sensorId: (path)
     - parameter sensor: (body)
     - returns: RequestBuilder<String>
     */
    open class func sensorUpdateWithRequestBuilder(sensorId: String, sensor: Sensor) -> RequestBuilder<String> {
        var path = "/sensor/{sensor_id}"
        let sensorIdPreEscape = "\(APIHelper.mapValueToPathItem(sensorId))"
        let sensorIdPostEscape = sensorIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{sensor_id}", with: sensorIdPostEscape, options: .literal, range: nil)
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: sensor)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<String>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     Get a single sensor, by identifier.
     
     - parameter sensorId: (path)
     - parameter transform: (query)  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - returns: AnyPublisher<[Any], Error>
     */
    @available(OSX 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func sensorView(sensorId: String, transform: String? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue) -> AnyPublisher<[Any], Error> {
        return Future<[Any], Error>.init { promise in
            sensorViewWithRequestBuilder(sensorId: sensorId, transform: transform).execute(apiResponseQueue) { result -> Void in
                switch result {
                case let .success(response):
                    promise(.success(response.body!))
                case let .failure(error):
                    promise(.failure(error))
                }
            }
        }.eraseToAnyPublisher()
    }

    /**
     Get a single sensor, by identifier.
     - GET /sensor/{sensor_id}
     - Get a single sensor, by identifier.
     - API Key:
       - type: apiKey Authorization
       - name: Authorization
     - parameter sensorId: (path)
     - parameter transform: (query)  (optional)
     - returns: RequestBuilder<[Any]>
     */
    open class func sensorViewWithRequestBuilder(sensorId: String, transform: String? = nil) -> RequestBuilder<[AnyCodable]> {
        var path = "/sensor/{sensor_id}"
        let sensorIdPreEscape = "\(APIHelper.mapValueToPathItem(sensorId))"
        let sensorIdPostEscape = sensorIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{sensor_id}", with: sensorIdPostEscape, options: .literal, range: nil)
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "transform": transform?.encodeToJSON()
        ])

        let requestBuilder: RequestBuilder<[AnyCodable]>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

}
